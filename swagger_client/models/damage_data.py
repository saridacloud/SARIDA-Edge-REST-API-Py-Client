# coding: utf-8

"""
    SaridaEdgeAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DamageData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'frame_time_start': 'FrameTime',
        'frame_time_end': 'FrameTime',
        'inspection_norm': 'InspectionNorm',
        'path_position': 'float',
        'range_damage_code': 'str',
        'major_code': 'str',
        'characterization1': 'str',
        'characterization2': 'str',
        'quantification1': 'float',
        'quantification2': 'float',
        'perimeter_location1': 'float',
        'perimeter_location2': 'float',
        'connection': 'bool'
    }

    attribute_map = {
        'frame_time_start': 'frameTimeStart',
        'frame_time_end': 'frameTimeEnd',
        'inspection_norm': 'inspectionNorm',
        'path_position': 'pathPosition',
        'range_damage_code': 'rangeDamageCode',
        'major_code': 'majorCode',
        'characterization1': 'characterization1',
        'characterization2': 'characterization2',
        'quantification1': 'quantification1',
        'quantification2': 'quantification2',
        'perimeter_location1': 'perimeterLocation1',
        'perimeter_location2': 'perimeterLocation2',
        'connection': 'connection'
    }

    def __init__(self, frame_time_start=None, frame_time_end=None, inspection_norm=None, path_position=None, range_damage_code=None, major_code=None, characterization1=None, characterization2=None, quantification1=None, quantification2=None, perimeter_location1=None, perimeter_location2=None, connection=None):  # noqa: E501
        """DamageData - a model defined in Swagger"""  # noqa: E501
        self._frame_time_start = None
        self._frame_time_end = None
        self._inspection_norm = None
        self._path_position = None
        self._range_damage_code = None
        self._major_code = None
        self._characterization1 = None
        self._characterization2 = None
        self._quantification1 = None
        self._quantification2 = None
        self._perimeter_location1 = None
        self._perimeter_location2 = None
        self._connection = None
        self.discriminator = None
        if frame_time_start is not None:
            self.frame_time_start = frame_time_start
        if frame_time_end is not None:
            self.frame_time_end = frame_time_end
        if inspection_norm is not None:
            self.inspection_norm = inspection_norm
        if path_position is not None:
            self.path_position = path_position
        if range_damage_code is not None:
            self.range_damage_code = range_damage_code
        if major_code is not None:
            self.major_code = major_code
        if characterization1 is not None:
            self.characterization1 = characterization1
        if characterization2 is not None:
            self.characterization2 = characterization2
        if quantification1 is not None:
            self.quantification1 = quantification1
        if quantification2 is not None:
            self.quantification2 = quantification2
        if perimeter_location1 is not None:
            self.perimeter_location1 = perimeter_location1
        if perimeter_location2 is not None:
            self.perimeter_location2 = perimeter_location2
        if connection is not None:
            self.connection = connection

    @property
    def frame_time_start(self):
        """Gets the frame_time_start of this DamageData.  # noqa: E501


        :return: The frame_time_start of this DamageData.  # noqa: E501
        :rtype: FrameTime
        """
        return self._frame_time_start

    @frame_time_start.setter
    def frame_time_start(self, frame_time_start):
        """Sets the frame_time_start of this DamageData.


        :param frame_time_start: The frame_time_start of this DamageData.  # noqa: E501
        :type: FrameTime
        """

        self._frame_time_start = frame_time_start

    @property
    def frame_time_end(self):
        """Gets the frame_time_end of this DamageData.  # noqa: E501


        :return: The frame_time_end of this DamageData.  # noqa: E501
        :rtype: FrameTime
        """
        return self._frame_time_end

    @frame_time_end.setter
    def frame_time_end(self, frame_time_end):
        """Sets the frame_time_end of this DamageData.


        :param frame_time_end: The frame_time_end of this DamageData.  # noqa: E501
        :type: FrameTime
        """

        self._frame_time_end = frame_time_end

    @property
    def inspection_norm(self):
        """Gets the inspection_norm of this DamageData.  # noqa: E501


        :return: The inspection_norm of this DamageData.  # noqa: E501
        :rtype: InspectionNorm
        """
        return self._inspection_norm

    @inspection_norm.setter
    def inspection_norm(self, inspection_norm):
        """Sets the inspection_norm of this DamageData.


        :param inspection_norm: The inspection_norm of this DamageData.  # noqa: E501
        :type: InspectionNorm
        """

        self._inspection_norm = inspection_norm

    @property
    def path_position(self):
        """Gets the path_position of this DamageData.  # noqa: E501

        Lage in Laengsrichtung [m]  # noqa: E501

        :return: The path_position of this DamageData.  # noqa: E501
        :rtype: float
        """
        return self._path_position

    @path_position.setter
    def path_position(self, path_position):
        """Sets the path_position of this DamageData.

        Lage in Laengsrichtung [m]  # noqa: E501

        :param path_position: The path_position of this DamageData.  # noqa: E501
        :type: float
        """

        self._path_position = path_position

    @property
    def range_damage_code(self):
        """Gets the range_damage_code of this DamageData.  # noqa: E501

        Kode fuer Streckenschaden  # noqa: E501

        :return: The range_damage_code of this DamageData.  # noqa: E501
        :rtype: str
        """
        return self._range_damage_code

    @range_damage_code.setter
    def range_damage_code(self, range_damage_code):
        """Sets the range_damage_code of this DamageData.

        Kode fuer Streckenschaden  # noqa: E501

        :param range_damage_code: The range_damage_code of this DamageData.  # noqa: E501
        :type: str
        """

        self._range_damage_code = range_damage_code

    @property
    def major_code(self):
        """Gets the major_code of this DamageData.  # noqa: E501

        Hauptcode  # noqa: E501

        :return: The major_code of this DamageData.  # noqa: E501
        :rtype: str
        """
        return self._major_code

    @major_code.setter
    def major_code(self, major_code):
        """Sets the major_code of this DamageData.

        Hauptcode  # noqa: E501

        :param major_code: The major_code of this DamageData.  # noqa: E501
        :type: str
        """

        self._major_code = major_code

    @property
    def characterization1(self):
        """Gets the characterization1 of this DamageData.  # noqa: E501

        Charakterisierung 1  # noqa: E501

        :return: The characterization1 of this DamageData.  # noqa: E501
        :rtype: str
        """
        return self._characterization1

    @characterization1.setter
    def characterization1(self, characterization1):
        """Sets the characterization1 of this DamageData.

        Charakterisierung 1  # noqa: E501

        :param characterization1: The characterization1 of this DamageData.  # noqa: E501
        :type: str
        """

        self._characterization1 = characterization1

    @property
    def characterization2(self):
        """Gets the characterization2 of this DamageData.  # noqa: E501

        Charakterisierung 2  # noqa: E501

        :return: The characterization2 of this DamageData.  # noqa: E501
        :rtype: str
        """
        return self._characterization2

    @characterization2.setter
    def characterization2(self, characterization2):
        """Sets the characterization2 of this DamageData.

        Charakterisierung 2  # noqa: E501

        :param characterization2: The characterization2 of this DamageData.  # noqa: E501
        :type: str
        """

        self._characterization2 = characterization2

    @property
    def quantification1(self):
        """Gets the quantification1 of this DamageData.  # noqa: E501

        Quantifizierung 1  # noqa: E501

        :return: The quantification1 of this DamageData.  # noqa: E501
        :rtype: float
        """
        return self._quantification1

    @quantification1.setter
    def quantification1(self, quantification1):
        """Sets the quantification1 of this DamageData.

        Quantifizierung 1  # noqa: E501

        :param quantification1: The quantification1 of this DamageData.  # noqa: E501
        :type: float
        """

        self._quantification1 = quantification1

    @property
    def quantification2(self):
        """Gets the quantification2 of this DamageData.  # noqa: E501

        Quantifizierung 2  # noqa: E501

        :return: The quantification2 of this DamageData.  # noqa: E501
        :rtype: float
        """
        return self._quantification2

    @quantification2.setter
    def quantification2(self, quantification2):
        """Sets the quantification2 of this DamageData.

        Quantifizierung 2  # noqa: E501

        :param quantification2: The quantification2 of this DamageData.  # noqa: E501
        :type: float
        """

        self._quantification2 = quantification2

    @property
    def perimeter_location1(self):
        """Gets the perimeter_location1 of this DamageData.  # noqa: E501

        Lage am Umfang 1  # noqa: E501

        :return: The perimeter_location1 of this DamageData.  # noqa: E501
        :rtype: float
        """
        return self._perimeter_location1

    @perimeter_location1.setter
    def perimeter_location1(self, perimeter_location1):
        """Sets the perimeter_location1 of this DamageData.

        Lage am Umfang 1  # noqa: E501

        :param perimeter_location1: The perimeter_location1 of this DamageData.  # noqa: E501
        :type: float
        """

        self._perimeter_location1 = perimeter_location1

    @property
    def perimeter_location2(self):
        """Gets the perimeter_location2 of this DamageData.  # noqa: E501

        Lage am Umfang 2  # noqa: E501

        :return: The perimeter_location2 of this DamageData.  # noqa: E501
        :rtype: float
        """
        return self._perimeter_location2

    @perimeter_location2.setter
    def perimeter_location2(self, perimeter_location2):
        """Sets the perimeter_location2 of this DamageData.

        Lage am Umfang 2  # noqa: E501

        :param perimeter_location2: The perimeter_location2 of this DamageData.  # noqa: E501
        :type: float
        """

        self._perimeter_location2 = perimeter_location2

    @property
    def connection(self):
        """Gets the connection of this DamageData.  # noqa: E501

        Verbindung  # noqa: E501

        :return: The connection of this DamageData.  # noqa: E501
        :rtype: bool
        """
        return self._connection

    @connection.setter
    def connection(self, connection):
        """Sets the connection of this DamageData.

        Verbindung  # noqa: E501

        :param connection: The connection of this DamageData.  # noqa: E501
        :type: bool
        """

        self._connection = connection

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DamageData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DamageData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
