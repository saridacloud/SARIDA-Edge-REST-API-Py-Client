# coding: utf-8

"""
    SaridaEdgeAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AnalysisDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'inspection_code': 'str',
        'c1': 'str',
        'c2': 'str',
        'polygon': 'Polygon'
    }

    attribute_map = {
        'inspection_code': 'inspectionCode',
        'c1': 'c1',
        'c2': 'c2',
        'polygon': 'polygon'
    }

    def __init__(self, inspection_code=None, c1=None, c2=None, polygon=None):  # noqa: E501
        """AnalysisDetails - a model defined in Swagger"""  # noqa: E501
        self._inspection_code = None
        self._c1 = None
        self._c2 = None
        self._polygon = None
        self.discriminator = None
        if inspection_code is not None:
            self.inspection_code = inspection_code
        if c1 is not None:
            self.c1 = c1
        if c2 is not None:
            self.c2 = c2
        if polygon is not None:
            self.polygon = polygon

    @property
    def inspection_code(self):
        """Gets the inspection_code of this AnalysisDetails.  # noqa: E501

        Haupt-Kode / Inspektions-Kode  # noqa: E501

        :return: The inspection_code of this AnalysisDetails.  # noqa: E501
        :rtype: str
        """
        return self._inspection_code

    @inspection_code.setter
    def inspection_code(self, inspection_code):
        """Sets the inspection_code of this AnalysisDetails.

        Haupt-Kode / Inspektions-Kode  # noqa: E501

        :param inspection_code: The inspection_code of this AnalysisDetails.  # noqa: E501
        :type: str
        """

        self._inspection_code = inspection_code

    @property
    def c1(self):
        """Gets the c1 of this AnalysisDetails.  # noqa: E501

        Charakterisierung 1  # noqa: E501

        :return: The c1 of this AnalysisDetails.  # noqa: E501
        :rtype: str
        """
        return self._c1

    @c1.setter
    def c1(self, c1):
        """Sets the c1 of this AnalysisDetails.

        Charakterisierung 1  # noqa: E501

        :param c1: The c1 of this AnalysisDetails.  # noqa: E501
        :type: str
        """

        self._c1 = c1

    @property
    def c2(self):
        """Gets the c2 of this AnalysisDetails.  # noqa: E501

        Charakterisierung 2  # noqa: E501

        :return: The c2 of this AnalysisDetails.  # noqa: E501
        :rtype: str
        """
        return self._c2

    @c2.setter
    def c2(self, c2):
        """Sets the c2 of this AnalysisDetails.

        Charakterisierung 2  # noqa: E501

        :param c2: The c2 of this AnalysisDetails.  # noqa: E501
        :type: str
        """

        self._c2 = c2

    @property
    def polygon(self):
        """Gets the polygon of this AnalysisDetails.  # noqa: E501


        :return: The polygon of this AnalysisDetails.  # noqa: E501
        :rtype: Polygon
        """
        return self._polygon

    @polygon.setter
    def polygon(self, polygon):
        """Sets the polygon of this AnalysisDetails.


        :param polygon: The polygon of this AnalysisDetails.  # noqa: E501
        :type: Polygon
        """

        self._polygon = polygon

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnalysisDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalysisDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
