# coding: utf-8

"""
    SaridaEdgeAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InspectionRunStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'frame_time': 'FrameTime',
        'running_state': 'RunningStates'
    }

    attribute_map = {
        'frame_time': 'frameTime',
        'running_state': 'runningState'
    }

    def __init__(self, frame_time=None, running_state=None):  # noqa: E501
        """InspectionRunStatus - a model defined in Swagger"""  # noqa: E501
        self._frame_time = None
        self._running_state = None
        self.discriminator = None
        self.frame_time = frame_time
        self.running_state = running_state

    @property
    def frame_time(self):
        """Gets the frame_time of this InspectionRunStatus.  # noqa: E501


        :return: The frame_time of this InspectionRunStatus.  # noqa: E501
        :rtype: FrameTime
        """
        return self._frame_time

    @frame_time.setter
    def frame_time(self, frame_time):
        """Sets the frame_time of this InspectionRunStatus.


        :param frame_time: The frame_time of this InspectionRunStatus.  # noqa: E501
        :type: FrameTime
        """
        if frame_time is None:
            raise ValueError("Invalid value for `frame_time`, must not be `None`")  # noqa: E501

        self._frame_time = frame_time

    @property
    def running_state(self):
        """Gets the running_state of this InspectionRunStatus.  # noqa: E501


        :return: The running_state of this InspectionRunStatus.  # noqa: E501
        :rtype: RunningStates
        """
        return self._running_state

    @running_state.setter
    def running_state(self, running_state):
        """Sets the running_state of this InspectionRunStatus.


        :param running_state: The running_state of this InspectionRunStatus.  # noqa: E501
        :type: RunningStates
        """
        if running_state is None:
            raise ValueError("Invalid value for `running_state`, must not be `None`")  # noqa: E501

        self._running_state = running_state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InspectionRunStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InspectionRunStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
