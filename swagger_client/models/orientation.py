# coding: utf-8

"""
    SaridaEdgeAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Orientation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'rotation_angle': 'float',
        'tilt_angle': 'float',
        'pan_angle': 'float'
    }

    attribute_map = {
        'rotation_angle': 'rotationAngle',
        'tilt_angle': 'tiltAngle',
        'pan_angle': 'panAngle'
    }

    def __init__(self, rotation_angle=None, tilt_angle=None, pan_angle=None):  # noqa: E501
        """Orientation - a model defined in Swagger"""  # noqa: E501
        self._rotation_angle = None
        self._tilt_angle = None
        self._pan_angle = None
        self.discriminator = None
        if rotation_angle is not None:
            self.rotation_angle = rotation_angle
        if tilt_angle is not None:
            self.tilt_angle = tilt_angle
        if pan_angle is not None:
            self.pan_angle = pan_angle

    @property
    def rotation_angle(self):
        """Gets the rotation_angle of this Orientation.  # noqa: E501

        Drehwinkel  # noqa: E501

        :return: The rotation_angle of this Orientation.  # noqa: E501
        :rtype: float
        """
        return self._rotation_angle

    @rotation_angle.setter
    def rotation_angle(self, rotation_angle):
        """Sets the rotation_angle of this Orientation.

        Drehwinkel  # noqa: E501

        :param rotation_angle: The rotation_angle of this Orientation.  # noqa: E501
        :type: float
        """

        self._rotation_angle = rotation_angle

    @property
    def tilt_angle(self):
        """Gets the tilt_angle of this Orientation.  # noqa: E501

        Neigungswinkel  # noqa: E501

        :return: The tilt_angle of this Orientation.  # noqa: E501
        :rtype: float
        """
        return self._tilt_angle

    @tilt_angle.setter
    def tilt_angle(self, tilt_angle):
        """Sets the tilt_angle of this Orientation.

        Neigungswinkel  # noqa: E501

        :param tilt_angle: The tilt_angle of this Orientation.  # noqa: E501
        :type: float
        """

        self._tilt_angle = tilt_angle

    @property
    def pan_angle(self):
        """Gets the pan_angle of this Orientation.  # noqa: E501

        Schwenkwinkel  # noqa: E501

        :return: The pan_angle of this Orientation.  # noqa: E501
        :rtype: float
        """
        return self._pan_angle

    @pan_angle.setter
    def pan_angle(self, pan_angle):
        """Sets the pan_angle of this Orientation.

        Schwenkwinkel  # noqa: E501

        :param pan_angle: The pan_angle of this Orientation.  # noqa: E501
        :type: float
        """

        self._pan_angle = pan_angle

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Orientation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Orientation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
