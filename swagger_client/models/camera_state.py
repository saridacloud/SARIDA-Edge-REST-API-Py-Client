# coding: utf-8

"""
    SaridaEdgeAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CameraState(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'frame_time': 'FrameTime',
        'path_position': 'float',
        'camera_orientation': 'Orientation',
        'lift_angle': 'float'
    }

    attribute_map = {
        'frame_time': 'frameTime',
        'path_position': 'pathPosition',
        'camera_orientation': 'cameraOrientation',
        'lift_angle': 'liftAngle'
    }

    def __init__(self, frame_time=None, path_position=None, camera_orientation=None, lift_angle=None):  # noqa: E501
        """CameraState - a model defined in Swagger"""  # noqa: E501
        self._frame_time = None
        self._path_position = None
        self._camera_orientation = None
        self._lift_angle = None
        self.discriminator = None
        if frame_time is not None:
            self.frame_time = frame_time
        if path_position is not None:
            self.path_position = path_position
        if camera_orientation is not None:
            self.camera_orientation = camera_orientation
        if lift_angle is not None:
            self.lift_angle = lift_angle

    @property
    def frame_time(self):
        """Gets the frame_time of this CameraState.  # noqa: E501


        :return: The frame_time of this CameraState.  # noqa: E501
        :rtype: FrameTime
        """
        return self._frame_time

    @frame_time.setter
    def frame_time(self, frame_time):
        """Sets the frame_time of this CameraState.


        :param frame_time: The frame_time of this CameraState.  # noqa: E501
        :type: FrameTime
        """

        self._frame_time = frame_time

    @property
    def path_position(self):
        """Gets the path_position of this CameraState.  # noqa: E501

        Weglaenge in [m]  # noqa: E501

        :return: The path_position of this CameraState.  # noqa: E501
        :rtype: float
        """
        return self._path_position

    @path_position.setter
    def path_position(self, path_position):
        """Sets the path_position of this CameraState.

        Weglaenge in [m]  # noqa: E501

        :param path_position: The path_position of this CameraState.  # noqa: E501
        :type: float
        """

        self._path_position = path_position

    @property
    def camera_orientation(self):
        """Gets the camera_orientation of this CameraState.  # noqa: E501


        :return: The camera_orientation of this CameraState.  # noqa: E501
        :rtype: Orientation
        """
        return self._camera_orientation

    @camera_orientation.setter
    def camera_orientation(self, camera_orientation):
        """Sets the camera_orientation of this CameraState.


        :param camera_orientation: The camera_orientation of this CameraState.  # noqa: E501
        :type: Orientation
        """

        self._camera_orientation = camera_orientation

    @property
    def lift_angle(self):
        """Gets the lift_angle of this CameraState.  # noqa: E501

        Hubwinkel  # noqa: E501

        :return: The lift_angle of this CameraState.  # noqa: E501
        :rtype: float
        """
        return self._lift_angle

    @lift_angle.setter
    def lift_angle(self, lift_angle):
        """Sets the lift_angle of this CameraState.

        Hubwinkel  # noqa: E501

        :param lift_angle: The lift_angle of this CameraState.  # noqa: E501
        :type: float
        """

        self._lift_angle = lift_angle

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CameraState, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CameraState):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
