# coding: utf-8

"""
    SaridaEdgeAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SectionBaseData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'section_id': 'str',
        'diameter': 'PipeDiameter',
        'profile': 'PipeProfiles',
        'material': 'Materials',
        'length': 'float'
    }

    attribute_map = {
        'section_id': 'sectionId',
        'diameter': 'diameter',
        'profile': 'profile',
        'material': 'material',
        'length': 'length'
    }

    def __init__(self, section_id=None, diameter=None, profile=None, material=None, length=None):  # noqa: E501
        """SectionBaseData - a model defined in Swagger"""  # noqa: E501
        self._section_id = None
        self._diameter = None
        self._profile = None
        self._material = None
        self._length = None
        self.discriminator = None
        self.section_id = section_id
        self.diameter = diameter
        if profile is not None:
            self.profile = profile
        self.material = material
        if length is not None:
            self.length = length

    @property
    def section_id(self):
        """Gets the section_id of this SectionBaseData.  # noqa: E501


        :return: The section_id of this SectionBaseData.  # noqa: E501
        :rtype: str
        """
        return self._section_id

    @section_id.setter
    def section_id(self, section_id):
        """Sets the section_id of this SectionBaseData.


        :param section_id: The section_id of this SectionBaseData.  # noqa: E501
        :type: str
        """
        if section_id is None:
            raise ValueError("Invalid value for `section_id`, must not be `None`")  # noqa: E501

        self._section_id = section_id

    @property
    def diameter(self):
        """Gets the diameter of this SectionBaseData.  # noqa: E501


        :return: The diameter of this SectionBaseData.  # noqa: E501
        :rtype: PipeDiameter
        """
        return self._diameter

    @diameter.setter
    def diameter(self, diameter):
        """Sets the diameter of this SectionBaseData.


        :param diameter: The diameter of this SectionBaseData.  # noqa: E501
        :type: PipeDiameter
        """
        if diameter is None:
            raise ValueError("Invalid value for `diameter`, must not be `None`")  # noqa: E501

        self._diameter = diameter

    @property
    def profile(self):
        """Gets the profile of this SectionBaseData.  # noqa: E501


        :return: The profile of this SectionBaseData.  # noqa: E501
        :rtype: PipeProfiles
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this SectionBaseData.


        :param profile: The profile of this SectionBaseData.  # noqa: E501
        :type: PipeProfiles
        """

        self._profile = profile

    @property
    def material(self):
        """Gets the material of this SectionBaseData.  # noqa: E501


        :return: The material of this SectionBaseData.  # noqa: E501
        :rtype: Materials
        """
        return self._material

    @material.setter
    def material(self, material):
        """Sets the material of this SectionBaseData.


        :param material: The material of this SectionBaseData.  # noqa: E501
        :type: Materials
        """
        if material is None:
            raise ValueError("Invalid value for `material`, must not be `None`")  # noqa: E501

        self._material = material

    @property
    def length(self):
        """Gets the length of this SectionBaseData.  # noqa: E501


        :return: The length of this SectionBaseData.  # noqa: E501
        :rtype: float
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this SectionBaseData.


        :param length: The length of this SectionBaseData.  # noqa: E501
        :type: float
        """

        self._length = length

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SectionBaseData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SectionBaseData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
