# coding: utf-8

"""
    SaridaEdgeAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class GUIApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def control_gui_detection_area_visibility_get(self, **kwargs):  # noqa: E501
        """control_gui_detection_area_visibility_get  # noqa: E501

        'Return if detection areas are currently visible in edge GUI'   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.control_gui_detection_area_visibility_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.control_gui_detection_area_visibility_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.control_gui_detection_area_visibility_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def control_gui_detection_area_visibility_get_with_http_info(self, **kwargs):  # noqa: E501
        """control_gui_detection_area_visibility_get  # noqa: E501

        'Return if detection areas are currently visible in edge GUI'   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.control_gui_detection_area_visibility_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method control_gui_detection_area_visibility_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/control/gui/detectionAreaVisibility', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def control_gui_detection_area_visibility_post(self, set_visible, **kwargs):  # noqa: E501
        """control_gui_detection_area_visibility_post  # noqa: E501

        Set visibility of detection areas in edge GUI  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.control_gui_detection_area_visibility_post(set_visible, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool set_visible: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.control_gui_detection_area_visibility_post_with_http_info(set_visible, **kwargs)  # noqa: E501
        else:
            (data) = self.control_gui_detection_area_visibility_post_with_http_info(set_visible, **kwargs)  # noqa: E501
            return data

    def control_gui_detection_area_visibility_post_with_http_info(self, set_visible, **kwargs):  # noqa: E501
        """control_gui_detection_area_visibility_post  # noqa: E501

        Set visibility of detection areas in edge GUI  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.control_gui_detection_area_visibility_post_with_http_info(set_visible, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool set_visible: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['set_visible']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method control_gui_detection_area_visibility_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'set_visible' is set
        if ('set_visible' not in params or
                params['set_visible'] is None):
            raise ValueError("Missing the required parameter `set_visible` when calling `control_gui_detection_area_visibility_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'set_visible' in params:
            query_params.append(('setVisible', params['set_visible']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/control/gui/detectionAreaVisibility', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def control_gui_detection_bounding_box_visibility_get(self, **kwargs):  # noqa: E501
        """control_gui_detection_bounding_box_visibility_get  # noqa: E501

        'Return if detection bounding boxes are currently visible in ' 'edge GUI'   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.control_gui_detection_bounding_box_visibility_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.control_gui_detection_bounding_box_visibility_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.control_gui_detection_bounding_box_visibility_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def control_gui_detection_bounding_box_visibility_get_with_http_info(self, **kwargs):  # noqa: E501
        """control_gui_detection_bounding_box_visibility_get  # noqa: E501

        'Return if detection bounding boxes are currently visible in ' 'edge GUI'   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.control_gui_detection_bounding_box_visibility_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method control_gui_detection_bounding_box_visibility_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/control/gui/detectionBoundingBoxVisibility', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def control_gui_detection_bounding_box_visibility_post(self, set_visible, **kwargs):  # noqa: E501
        """control_gui_detection_bounding_box_visibility_post  # noqa: E501

        'Set visibility of detection bounding boxes in edge GUI'   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.control_gui_detection_bounding_box_visibility_post(set_visible, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool set_visible: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.control_gui_detection_bounding_box_visibility_post_with_http_info(set_visible, **kwargs)  # noqa: E501
        else:
            (data) = self.control_gui_detection_bounding_box_visibility_post_with_http_info(set_visible, **kwargs)  # noqa: E501
            return data

    def control_gui_detection_bounding_box_visibility_post_with_http_info(self, set_visible, **kwargs):  # noqa: E501
        """control_gui_detection_bounding_box_visibility_post  # noqa: E501

        'Set visibility of detection bounding boxes in edge GUI'   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.control_gui_detection_bounding_box_visibility_post_with_http_info(set_visible, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool set_visible: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['set_visible']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method control_gui_detection_bounding_box_visibility_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'set_visible' is set
        if ('set_visible' not in params or
                params['set_visible'] is None):
            raise ValueError("Missing the required parameter `set_visible` when calling `control_gui_detection_bounding_box_visibility_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'set_visible' in params:
            query_params.append(('setVisible', params['set_visible']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/control/gui/detectionBoundingBoxVisibility', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def control_gui_detection_color_get(self, detection_class, **kwargs):  # noqa: E501
        """control_gui_detection_color_get  # noqa: E501

        Return color of detection class in edge GUI  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.control_gui_detection_color_get(detection_class, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DetectionClasses detection_class: (required)
        :return: Color
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.control_gui_detection_color_get_with_http_info(detection_class, **kwargs)  # noqa: E501
        else:
            (data) = self.control_gui_detection_color_get_with_http_info(detection_class, **kwargs)  # noqa: E501
            return data

    def control_gui_detection_color_get_with_http_info(self, detection_class, **kwargs):  # noqa: E501
        """control_gui_detection_color_get  # noqa: E501

        Return color of detection class in edge GUI  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.control_gui_detection_color_get_with_http_info(detection_class, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DetectionClasses detection_class: (required)
        :return: Color
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['detection_class']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method control_gui_detection_color_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'detection_class' is set
        if ('detection_class' not in params or
                params['detection_class'] is None):
            raise ValueError("Missing the required parameter `detection_class` when calling `control_gui_detection_color_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'detection_class' in params:
            query_params.append(('detectionClass', params['detection_class']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/control/gui/detectionColor', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Color',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def control_gui_detection_color_post(self, body, **kwargs):  # noqa: E501
        """control_gui_detection_color_post  # noqa: E501

        Set color of detection class in edge GUI  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.control_gui_detection_color_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GuiDetectionColorBody body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.control_gui_detection_color_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.control_gui_detection_color_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def control_gui_detection_color_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """control_gui_detection_color_post  # noqa: E501

        Set color of detection class in edge GUI  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.control_gui_detection_color_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GuiDetectionColorBody body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method control_gui_detection_color_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `control_gui_detection_color_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/control/gui/detectionColor', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def control_gui_detection_polygon_visibility_get(self, **kwargs):  # noqa: E501
        """control_gui_detection_polygon_visibility_get  # noqa: E501

        'Return if detection polygons are currently visible in edge '  'GUI'   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.control_gui_detection_polygon_visibility_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.control_gui_detection_polygon_visibility_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.control_gui_detection_polygon_visibility_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def control_gui_detection_polygon_visibility_get_with_http_info(self, **kwargs):  # noqa: E501
        """control_gui_detection_polygon_visibility_get  # noqa: E501

        'Return if detection polygons are currently visible in edge '  'GUI'   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.control_gui_detection_polygon_visibility_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method control_gui_detection_polygon_visibility_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/control/gui/detectionPolygonVisibility', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def control_gui_detection_polygon_visibility_post(self, set_visible, **kwargs):  # noqa: E501
        """control_gui_detection_polygon_visibility_post  # noqa: E501

        Set visibility of detection polygons in edge GUI  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.control_gui_detection_polygon_visibility_post(set_visible, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool set_visible: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.control_gui_detection_polygon_visibility_post_with_http_info(set_visible, **kwargs)  # noqa: E501
        else:
            (data) = self.control_gui_detection_polygon_visibility_post_with_http_info(set_visible, **kwargs)  # noqa: E501
            return data

    def control_gui_detection_polygon_visibility_post_with_http_info(self, set_visible, **kwargs):  # noqa: E501
        """control_gui_detection_polygon_visibility_post  # noqa: E501

        Set visibility of detection polygons in edge GUI  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.control_gui_detection_polygon_visibility_post_with_http_info(set_visible, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool set_visible: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['set_visible']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method control_gui_detection_polygon_visibility_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'set_visible' is set
        if ('set_visible' not in params or
                params['set_visible'] is None):
            raise ValueError("Missing the required parameter `set_visible` when calling `control_gui_detection_polygon_visibility_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'set_visible' in params:
            query_params.append(('setVisible', params['set_visible']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/control/gui/detectionPolygonVisibility', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def control_gui_detection_text_visibility_get(self, **kwargs):  # noqa: E501
        """control_gui_detection_text_visibility_get  # noqa: E501

        'Return if detection texts are currently visible in edge GUI'   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.control_gui_detection_text_visibility_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.control_gui_detection_text_visibility_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.control_gui_detection_text_visibility_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def control_gui_detection_text_visibility_get_with_http_info(self, **kwargs):  # noqa: E501
        """control_gui_detection_text_visibility_get  # noqa: E501

        'Return if detection texts are currently visible in edge GUI'   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.control_gui_detection_text_visibility_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method control_gui_detection_text_visibility_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/control/gui/detectionTextVisibility', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def control_gui_detection_text_visibility_post(self, set_visible, **kwargs):  # noqa: E501
        """control_gui_detection_text_visibility_post  # noqa: E501

        Set visibility of detection texts in edge GUI  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.control_gui_detection_text_visibility_post(set_visible, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool set_visible: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.control_gui_detection_text_visibility_post_with_http_info(set_visible, **kwargs)  # noqa: E501
        else:
            (data) = self.control_gui_detection_text_visibility_post_with_http_info(set_visible, **kwargs)  # noqa: E501
            return data

    def control_gui_detection_text_visibility_post_with_http_info(self, set_visible, **kwargs):  # noqa: E501
        """control_gui_detection_text_visibility_post  # noqa: E501

        Set visibility of detection texts in edge GUI  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.control_gui_detection_text_visibility_post_with_http_info(set_visible, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool set_visible: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['set_visible']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method control_gui_detection_text_visibility_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'set_visible' is set
        if ('set_visible' not in params or
                params['set_visible'] is None):
            raise ValueError("Missing the required parameter `set_visible` when calling `control_gui_detection_text_visibility_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'set_visible' in params:
            query_params.append(('setVisible', params['set_visible']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/control/gui/detectionTextVisibility', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def control_gui_detections_visibility_get(self, **kwargs):  # noqa: E501
        """control_gui_detections_visibility_get  # noqa: E501

        'Return if detections are currently visible in edge GUI'   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.control_gui_detections_visibility_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.control_gui_detections_visibility_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.control_gui_detections_visibility_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def control_gui_detections_visibility_get_with_http_info(self, **kwargs):  # noqa: E501
        """control_gui_detections_visibility_get  # noqa: E501

        'Return if detections are currently visible in edge GUI'   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.control_gui_detections_visibility_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method control_gui_detections_visibility_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/control/gui/detectionsVisibility', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def control_gui_detections_visibility_post(self, set_visible, **kwargs):  # noqa: E501
        """control_gui_detections_visibility_post  # noqa: E501

        Set detections visibility in edge GUI  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.control_gui_detections_visibility_post(set_visible, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool set_visible: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.control_gui_detections_visibility_post_with_http_info(set_visible, **kwargs)  # noqa: E501
        else:
            (data) = self.control_gui_detections_visibility_post_with_http_info(set_visible, **kwargs)  # noqa: E501
            return data

    def control_gui_detections_visibility_post_with_http_info(self, set_visible, **kwargs):  # noqa: E501
        """control_gui_detections_visibility_post  # noqa: E501

        Set detections visibility in edge GUI  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.control_gui_detections_visibility_post_with_http_info(set_visible, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool set_visible: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['set_visible']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method control_gui_detections_visibility_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'set_visible' is set
        if ('set_visible' not in params or
                params['set_visible'] is None):
            raise ValueError("Missing the required parameter `set_visible` when calling `control_gui_detections_visibility_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'set_visible' in params:
            query_params.append(('setVisible', params['set_visible']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/control/gui/detectionsVisibility', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
